{
    parserClass="org.intellij.sdk.language.parser.McFunctionParser"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="McFunction"
    psiImplClassSuffix="Impl"
    psiPackage="org.intellij.sdk.language.psi"
    psiImplPackage="org.intellij.sdk.language.psi.impl"

    elementTypeHolderClass="org.intellij.sdk.language.psi.McFunctionTypes"
    elementTypeClass="org.intellij.sdk.language.psi.McFunctionElementType"
    tokenTypeClass="org.intellij.sdk.language.psi.McFunctionTokenType"

    psiImplUtilClass="org.intellij.sdk.language.psi.impl.McFunctionImplUtil"
}
//simpleFile ::= item_*
//
//private item_ ::= (property|COMMENT|CRLF)
//
//property ::= (KEY? SEPARATOR VALUE?) | KEY

mcFunctionFile ::= item_*

private item_ ::= (command|COMMENT|CRLF)

vec3 ::= (float float float)|(SYMBOL_TILDE float? SYMBOL_TILDE float? SYMBOL_TILDE float?)|(SYMBOL_CIRCONFLEX float? SYMBOL_CIRCONFLEX float? SYMBOL_CIRCONFLEX float?)
u_integer ::= INTEGER_ONE|INTEGER_NOT_ONE
integer ::= u_integer|INTEGER_SIGNED
u_float ::= U_FLOAT_RULE|u_integer
float ::= integer|u_float|FLOAT_SIGNED
integer_range ::= (integer SYMBOL_DOT SYMBOL_DOT integer)|(integer SYMBOL_DOT SYMBOL_DOT)|(SYMBOL_DOT SYMBOL_DOT integer)|integer
u_float_range ::= (u_float SYMBOL_DOT SYMBOL_DOT u_float)|(u_float SYMBOL_DOT SYMBOL_DOT)|(SYMBOL_DOT SYMBOL_DOT u_float)|u_float
float_range ::= (float SYMBOL_DOT SYMBOL_DOT float)|(float SYMBOL_DOT SYMBOL_DOT)|(SYMBOL_DOT SYMBOL_DOT float)|float

mob_effect ::= word|integer
item_slot ::= (word SYMBOL_DOT word)|(word SYMBOL_DOT integer)|word|integer
item_stack ::= (word SYMBOL_COLON)?word nbt_object
fractional ::= float (SYMBOL_FRACTIONAL float)?
resource_location ::= (word SYMBOL_COLON)? word (SYMBOL_SLASH word)* {methods=[getNamespace getPath]}
resource_location_tag ::= SYMBOL_HASH? resource_location
word ::= PLAYER_PSEUDO|WORD_RULE|ENUM_GAMEMODE|ENUM_ENTITY_ANCHOR
string_single_quote_child ::= SYMBOL_SINGLE_QUOTE (ANY_NO_QUOTE|SYMBOL_CANCELLED_SINGLE_QUOTE|SYMBOL_CANCELLED_DUAL_QUOTE|SYMBOL_CANCELLED_BACKSLASH)* SYMBOL_SINGLE_QUOTE
string_dual_quote_child ::= SYMBOL_DUAL_QUOTE (ANY_NO_QUOTE|SYMBOL_CANCELLED_SINGLE_QUOTE|SYMBOL_CANCELLED_DUAL_QUOTE|SYMBOL_CANCELLED_BACKSLASH)* SYMBOL_DUAL_QUOTE
string_single_quote_parent ::= SYMBOL_SINGLE_QUOTE (ANY_NO_QUOTE|SYMBOL_CANCELLED_SINGLE_QUOTE|SYMBOL_CANCELLED_BACKSLASH|string_dual_quote_child)* SYMBOL_SINGLE_QUOTE
string_dual_quote_parent ::= SYMBOL_DUAL_QUOTE (ANY_NO_QUOTE|SYMBOL_CANCELLED_DUAL_QUOTE|SYMBOL_CANCELLED_BACKSLASH|string_single_quote_child)* SYMBOL_DUAL_QUOTE
string_no_quote ::= (word|WHITE_SPACE)+
string ::= string_single_quote_parent|string_dual_quote_parent|string_no_quote

string_single_quote_child_with_selectors ::= SYMBOL_SINGLE_QUOTE (entities|ANY_NO_QUOTE|SYMBOL_CANCELLED_SINGLE_QUOTE|SYMBOL_CANCELLED_DUAL_QUOTE|SYMBOL_CANCELLED_BACKSLASH)* SYMBOL_SINGLE_QUOTE
string_dual_quote_child_with_selectors ::= SYMBOL_DUAL_QUOTE (entities|ANY_NO_QUOTE|SYMBOL_CANCELLED_SINGLE_QUOTE|SYMBOL_CANCELLED_DUAL_QUOTE|SYMBOL_CANCELLED_BACKSLASH)* SYMBOL_DUAL_QUOTE
string_single_quote_parent_with_selectors ::= SYMBOL_SINGLE_QUOTE (entities|ANY_NO_QUOTE|SYMBOL_CANCELLED_SINGLE_QUOTE|SYMBOL_CANCELLED_BACKSLASH|string_dual_quote_child_with_selectors)* SYMBOL_SINGLE_QUOTE
string_dual_quote_parent_with_selectors ::= SYMBOL_DUAL_QUOTE (entities|ANY_NO_QUOTE|SYMBOL_CANCELLED_DUAL_QUOTE|SYMBOL_CANCELLED_BACKSLASH|string_single_quote_child_with_selectors)* SYMBOL_DUAL_QUOTE
string_no_quote_with_selectors ::= (word|entities|WHITE_SPACE)+
string_with_selectors ::= string_single_quote_parent_with_selectors|string_dual_quote_parent_with_selectors|string_no_quote_with_selectors

nbt_object ::= SYMBOL_OPEN_CURLY word SYMBOL_COLON nbt_value(SYMBOL_COMMA word SYMBOL_COLON nbt_value)* SYMBOL_CLOSE_CURLY
nbt_array ::= SYMBOL_OPEN_SQUARE (ARRAY_TYPE_MARKER SYMBOL_SEMI_COLON)? (nbt_value(SYMBOL_COMMA nbt_value)*)? SYMBOL_CLOSE_SQUARE
nbt_value ::= nbt_object|nbt_array|BOOLEAN|integer|float|string

// ------------------------------------------------------------------
// entity selectors
// ------------------------------------------------------------------

// positional
position_argument ::= SELECTOR_ARGUMENT_XYZ SYMBOL_EQUAL float
distance_argument ::= SELECTOR_ARGUMENT_DISTANCE SYMBOL_EQUAL u_float_range
volume_argument ::= SELECTOR_ARGUMENT_DXYZ SYMBOL_EQUAL fractional

// scoreboard value
scores_argument ::= SELECTOR_ARGUMENT_SCORES SYMBOL_EQUAL SYMBOL_OPEN_CURLY word SYMBOL_EQUAL integer_range(SYMBOL_COMMA word SYMBOL_EQUAL integer_range)*SYMBOL_CLOSE_CURLY
tag_argument ::= SELECTOR_ARGUMENT_TAG SYMBOL_EQUAL SYMBOL_NEGATE?word?
team_argument ::= SELECTOR_ARGUMENT_TEAM SYMBOL_EQUAL SYMBOL_NEGATE?word?

// traits
sort_argument ::= SELECTOR_ARGUMENT_SORT SYMBOL_EQUAL ENUM_SORT
level_argument ::= SELECTOR_ARGUMENT_LEVEL SYMBOL_EQUAL integer_range
gamemode_argument ::= SELECTOR_ARGUMENT_GAMEMODE SYMBOL_EQUAL SYMBOL_NEGATE?ENUM_GAMEMODE
name_argument ::= SELECTOR_ARGUMENT_NAME SYMBOL_EQUAL SYMBOL_NEGATE?word
rotation_argument ::= SELECTOR_ARGUMENT_XY_ROTATION SYMBOL_EQUAL float_range
type_argument ::= SELECTOR_ARGUMENT_TYPE SYMBOL_EQUAL SYMBOL_NEGATE?resource_location_tag
nbt_argument ::= SELECTOR_ARGUMENT_NBT SYMBOL_EQUAL nbt_object
advancements_argument ::= SELECTOR_ARGUMENT_ADVANCEMENTS SYMBOL_EQUAL SYMBOL_OPEN_CURLY resource_location SYMBOL_EQUAL (BOOLEAN|(SYMBOL_OPEN_CURLY word SYMBOL_EQUAL BOOLEAN(SYMBOL_COMMA word SYMBOL_EQUAL BOOLEAN)* SYMBOL_CLOSE_CURLY))SYMBOL_CLOSE_CURLY
predicate_argument ::= SELECTOR_ARGUMENT_PREDICATE SYMBOL_EQUAL SYMBOL_NEGATE?resource_location

entity_selector_argument_no_limit ::=
    position_argument|distance_argument|volume_argument|
    scores_argument|tag_argument|team_argument|
    sort_argument|level_argument|gamemode_argument|name_argument|rotation_argument|type_argument|nbt_argument|advancements_argument|predicate_argument
entity_selector_argument ::= entity_selector_argument_no_limit|limit_argument

limit_argument ::= SELECTOR_ARGUMENT_LIMIT SYMBOL_EQUAL u_integer {pin=1}
limit_1_argument ::= SELECTOR_ARGUMENT_LIMIT SYMBOL_EQUAL INTEGER_ONE {pin=1}

limit_1_entity_selector_argument_block ::= SYMBOL_OPEN_SQUARE (limit_1_argument|entity_selector_argument_no_limit)(SYMBOL_COMMA (limit_1_argument|entity_selector_argument_no_limit))* SYMBOL_CLOSE_SQUARE
entity_selector_argument_block ::= SYMBOL_OPEN_SQUARE (entity_selector_argument)(SYMBOL_COMMA entity_selector_argument)* SYMBOL_CLOSE_SQUARE

base_unique_entity_selector ::= TOK_AT_P|TOK_AT_R
base_multi_entity_selector ::= TOK_AT_A|TOK_AT_E
forced_unique_entity_selector ::= TOK_AT_S

unique_entity_selector ::=
    (base_unique_entity_selector limit_1_entity_selector_argument_block?)|
    (base_multi_entity_selector limit_1_entity_selector_argument_block)|
    (forced_unique_entity_selector limit_1_entity_selector_argument_block?)
multi_entity_selector ::=
    (base_unique_entity_selector entity_selector_argument_block?)|
    (base_multi_entity_selector entity_selector_argument_block?)|
    (forced_unique_entity_selector entity_selector_argument_block?)

entities ::= multi_entity_selector|PLAYER_PSEUDO|UUID
entity ::= unique_entity_selector|PLAYER_PSEUDO|UUID

// ------------------------------------------------------------------
// commands
// ------------------------------------------------------------------

command ::= (killCommand|tpCommand|banCommand|effectCommand|functionCommand|gamemodeCommand|itemCommand) {recoverWhile="command_recover"}
private command_recover ::= !CRLF

// advancement
/*
advancement (grant|revoke) <targets> everything
advancement (grant|revoke) <targets> only <advancement> [<criterion>]
advancement (grant|revoke) <targets> from <advancement>
advancement (grant|revoke) <targets> through <advancement>
advancement (grant|revoke) <targets> until <advancement>
<targets> entities
<advancement> resource_location
<criterion> string
 */
// advancementCommand := ADVANCEMENT SYMBOL_GRANT_OR_REVOKE entities (SYMBOL_EVERYTHING|(SYMBOL_ONLY RESOURCE_LOCATION CRITERION?)|(SYMBOL_ADVANCEMENT_LIMITS RESOURCE_LOCATION))

// attribute
/*
attribute <target> <attribute> get [<scale>]
attribute <target> <attribute> base get [<scale>]
attribute <target> <attribute> base set <value>
attribute <target> <attribute> modifier add <uuid> <name> <value> (add|multiply|multiply_base)
attribute <target> <attribute> modifier remove <uuid>
attribute <target> <attribute> modifier value get <uuid> [<scale>]
<target> entity
<attribute> resource_location
<scale> double
<uuid> uuid 00000001-0002-0003-0004-000000000005
<name> string "[-+._A-Za-z0-9]+"
<value> double
 */

// ban
/*
ban <targets> [<reason>]
<targets> players
<reason> string_with_selectors
 */
banCommand ::= COMMAND_BAN entities string_with_selectors? {pin=1}

// ban-ip

// banlist

// bossbar

// clear

// clone

// data

// datapack

// debug

// defaultgamemode

// deop

// difficulty

// effect
/*
effect clear [<targets>] [<effect>]
effect give <targets> <effect> [<seconds>] [<amplifier>] [<hideParticles>]
<targets> entities
<effect> mob_effect
<seconds> u_integer
<amplifier> u_integer
<hideParticles> boolean
 */
effectCommand ::= COMMAND_EFFECT (KEYWORD_CLEAR effectClearArguments)|(KEYWORD_GIVE effectGiveArguments) {pin=1}
effectClearArguments ::= entities? mob_effect?
effectGiveArguments ::= entities mob_effect integer? integer? BOOLEAN?

// enchant

// execute

// experience

// fill

// forceload

// function
functionCommand ::= COMMAND_FUNCTION resource_location_tag {pin=1}

// gamemode
gamemodeCommand ::= COMMAND_GAMEMODE ENUM_GAMEMODE entities? {pin=1}

// gamerule

// give

// help

// item
/*
item modify (block <pos>|entity <targets>) <slot> <modifier>
item replace (block <pos>|entity <targets>) <slot> with <item> [<count>]
item replace (block <pos>|entity <targets>) <slot> from (block <sourcePos>|entity <sourceTarget>) <sourceSlot> [<modifier>]
 */
itemCommand ::= COMMAND_ITEM itemReplaceArguments|itemModifyArguments {pin=1}
itemCommonArguments ::= (KEYWORD_BLOCK vec3)|(KEYWORD_ENTITY entities) item_slot
itemModifyArguments ::= KEYWORD_MODIFY itemCommonArguments resource_location
itemReplaceArguments ::= KEYWORD_REPLACE itemCommonArguments (KEYWORD_WITH item_stack integer?)|(KEYWORD_FROM itemCommonArguments) resource_location?

// jfr

// kick

// kill
killCommand ::= COMMAND_KILL entities {pin=1}

// list

// locate

// locatebiome

// loot

// me

// msg

// op

// pardon

// pardon-ip

// particle

// perf

// playsound

// publish

// recipe

// reload

// save-all

// save-off

// save-on

// say

// schedule

// scoreboard

// seed

// setblock

// setidletimeout

// setworldspawn

// spawnpoint

// spectate

// spreadplayers

// stop

// stopsound

// summon

// tag

// team

// teammsg

// teleport
tpCommand ::= COMMAND_TELEPORT ((entities entity)|(entities tpVecArgs)|entity|tpVecArgs) {pin=1}
tpVecArgs ::= vec3 (float|tpFacingArg)?
tpFacingArg ::= KEYWORD_FACING (vec3|(KEYWORD_ENTITY entity)) ENUM_ENTITY_ANCHOR?

// tell

// tellraw

// time

// title

// tm

// tp

// trigger

// w

// weather

// whitelist

// worldborder

// xp